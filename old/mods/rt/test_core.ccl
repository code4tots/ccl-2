startTime = time[]

assert[not nil]
assert[true]
assert[not false]
assert[\. 5]
math = import['rt/math']
assert[math]
assert[math.str[] == '<module "rt/math">']
x = 1
assert[x is x]
assert[1 is not 2]
assert['true']
assert[not '']
assert[1]
assert[not 0]
assert[(\.nil).lineno[] == 17, (\.nil).lineno[]]
ti = import['rt/test_import']
assert[ti@example_var == 5]

f = \ x. x + 1

assert[f[5] == 6, f[5]]
assert[f[5].repr[] == '6', f[5].repr[]]
assert[(2.45).repr[] == '2.45', (2.45).repr[]]
assert[L[1,2,3].repr[] == "L[1, 2, 3]", L[1,2,3].repr[]]
assert[M[1,2].repr[] == "M[1, 2]", M[1,2].repr[]]
assert[M[1,2].str[] == "M[1, 2]", M[1,2].str[]]
assert[nil.str[] == 'nil', nil.str[]]
assert[true.str[] == 'true', true.str[]]
assert[false.str[] == 'false', false.str[]]

assert[true]
assert[not false]
assert[true or false]
assert[false or true]
assert[not (false or false)]
assert[not (true and false)]
assert[true and true]

assert[1 == 1]
assert[L[1] == L[1]]
assert[M['a', 'b'] == M['a', 'b']]
assert[M[1, 2] != M['a', 'b']]

assert[M[1, 2, 3, 4] == M[3, 4, 1, 2]]

m = M[1, 2]
assert[m.has[1]]
assert[not m.has[2]]
m.rm[1]
assert[not m.has[1]]

# TODO: Uncomment or delete the following tests.
r'''

xs = L[1, 2, 3].map[\x. x + 1]
assert[xs == L[2, 3, 4], xs]

# There was a lexer bug with 'x+1' where 'x+1'
# would be interpreted as the tokens 'x' and '+1' instead of
# 'x', '+', and '1'.
assert[L[1, 2, 3].map[\x. x+1] == L[2, 3, 4]]
assert[+1 == 1]
assert[-1 == 0-1]

assert[L[1, 2, 3][1] == 2]
assert[M[1, 2][1] == 2]

# TODO: Figure out a nice syntax so that I don't have to
# repeat the class name every time.
IndexableTest = Meta["IndexableTest"]
IndexableTest@__call__ = \index. index + 3

indexable = new[IndexableTest]
assert[indexable[5] == 8]

xs = L[]
assert[xs.str[] == 'L[]']
xs.add[1]
assert[xs.str[] == 'L[1]']

i = 0
xs = L[]
while i < 5 {
  xs.add[i]
  i = i + 1
}
assert[xs == L[0, 1, 2, 3, 4]]

x = 0
if true
  x = 1
assert[x == 1]

x = 0
if false
  x = 1
assert[x == 0]

if true
  x = 0
else
  x = 1
assert[x == 0]

if false
  x = 0
else
  x = 1
assert[x == 1]

assert[if 1 == 0 false else true]

MyClass = Meta["test#MyClass"]
x = new[MyClass]
x@x = 534
assert[x@x == 534]

f = \x{x+2}
assert[f[2] == nil, f[2]]

f = \x{return x+2}
assert[f[2] == 4]

xs = L[1, 2, 3]
xs[1] = 1
xs[2] = 1
assert[xs == L[1, 1, 1]]

assert[L[1, 2, 3].len[] == 3]

assert[L[1, 4, 2, 3].filter[\x. 2 < x] == L[4, 3]]

assert[L[1, 2].foldl[L, 0] == L[L[0, 1], 2], L[1, 2].foldl[L, 0].repr[]]
assert[L[0, 1].foldr[L, 2] == L[0, L[1, 2]]]
assert[L[1, 2, 3].fold[\a b. a + b, 4] == 10]

assert[L[1, 2, 3, 4].cut[1, nil] == L[2, 3, 4], L[1, 2, 3, 4].cut[1, nil]]
assert[L[1, 2, 3, 4].cut[1, 2] == L[2], L[1, 2, 3, 4].cut[1, 2]]
assert[L[1, 2, 3, 4].cut[1, -1] == L[2, 3], L[1, 2, 3, 4].cut[1, -1]]

assert[L[1, 2, 3].reduce[\a b. a + b] == 6]

assert[1 < 2]
assert[5 >= 4 and 5 >= 5]
assert[1 <= 1 and 1 <= 2]
assert[2 > 1 and not (1 > 2)]

assert[List.str[] == 'List', List.str[] + " " + List.repr[]]

assert['hi'.str[] == 'hi']
assert['hi'.repr[] == '"hi"']

(\x y. assert[self == 3 and x == 1 and y == 2]).apply[3, L[1, 2]]

assert[L[1, 2, 3].iter[].list[] == L[1, 2, 3]]
assert[M[1, 2].iter[].list[] == L[L[1, 2]]]
assert[L[1, 2, 3].iter[].map[\x. x + 1] is not nil]
assert[L[1, 2, 3].iter[].map[\x. x + 1].list[] == L[2, 3, 4]]
iter = L[1].iter[]
assert[iter is iter.iter[]]

xs = L[]
assert[L[5, 6, 7].iter[].do[\x. xs.add[x]] is nil]
assert[xs == L[5, 6, 7]]

xs = L[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1].iter[]
    .filter[\x. x > 4]
    .map[\x. x + 2]
    .list[]

assert[xs == L[7, 8, 7], xs]

xs = range[0, 5].list[]
assert[xs == L[0, 1, 2, 3, 4], xs]

xs = range[0, -4, -1].list[]
assert[xs == L[0, -1, -2, -3], xs]

xs = range[0].takeWhile[\x. x < 5].list[]
assert[xs == L[0, 1, 2, 3, 4], xs]

xs = range[0].zip[range[1, 3]].list[]
assert[xs == L[L[0, 1], L[1, 2]], xs]

xs = L['a', 'b'].iter[].enum[].list[]
assert[xs == L[L['a', 0], L['b', 1]], xs]

xs = L[2, 3, 4].iter[].take[2].list[]
assert[xs == L[2, 3], xs]

xs = L[2, 3, 4].iter[].drop[2].list[]
assert[xs == L[4], xs]

xs = L[2, 3, 4].iter[].dropWhile[\x. x < 4].list[]
assert[xs == L[4], xs]

s = '%s + %s' % L[1, 2]
assert[s == '1 + 2', s]

t = import['import_test']
assert[t@message == 'hi', t@message]

s = re[r'hi'].repl['hi hi', 'there']
assert[s == 'there there', s]

s = re[r'hi'].repl['hi hi', 'there', 3]
assert[s == 'hi there', s]

s = re[r'hi'].repl['hi hi hi', 'there', 3, 5]
assert[s == 'hi there hi', s]

s = re[r'hi'].find['hi hi hi', 3, 5]
assert[s == L['hi'], s]

s = re[r'(hi)'].find['hi hi hi', 3, 5]
assert[s == L['hi', 'hi'], s]

s = re[r'(h(\w))'].find['hi hi hi', 3, 5]
assert[s == L['hi', 'hi', 'i'], s]

s = re[r'x'].find['yyy']
assert[s is nil, s]

# Goroutine/channel test.
ch = Channel[]
go[\. {
  sleep[100]
  ch.put[5]
}]
assert[(x = ch.take[]) == 5, x]

lines = r"""
a
b cd
""".lines[]
assert[lines == L['', 'a', 'b cd'], lines]

words = r"""
a
b cd

""".words[]

assert[words == L['', 'a', 'b', 'cd'], words]


words = r"""
a
b cd

""".trim[].words[]

assert[words == L['a', 'b', 'cd'], words]

assert[(x = '5'.int[]) == 5, x]

assert['hi'[1] == 'i', 'hi'[1]]
assert['hi'.len[] == 2, 'hi'.len[]]

assert[(xs = 'hi'.iter[].list[]) == L['h', 'i'], xs]

x = 4
(\\. x = 3)[]
assert[x == 3, x]

flag = false
L[L[1, 2, 3]].iter[].map[\\[a b c] {
  flag = true
  assert[a == 1, a]
  assert[b == 2, b]
  assert[c == 3, c]
}].do[]
assert[flag]

assert[(r = max[1, 2, 3]) == 3, r]
assert[(r = min[1, 2, 3]) == 1, r]

let [a b c *d] = L[4, 5, 6, 7, 8]
assert[a == 4, a]
assert[b == 5, b]
assert[c == 6, c]
assert[d == L[7, 8], d]

assert[(x = L[7, 8, 9].last[]) == 9, x]

assert[(x = M[1, 2].keys[].list[]) == L[1], x]

assert[(x = L['1', '3', '2'].ints[]) == L[1, 3, 2], x]

x = L[1, 2]
x.cat[L[3, 4]]
assert[x == L[1, 2, 3, 4], x]

x = L[1, 2]
assert[x * 3 == L[1, 2, 1, 2, 1, 2], x * 3]

f = \a [b c]. L[a b c]
assert[(x = f[1, L[2, 3]]) == L[1, 2, 3], x]

let [a, [b, c], /d, *e] = L[1, L[2, 3], 4, 5, 6]
assert[a == 1, a]
assert[b == 2, b]
assert[c == 3, c]
assert[d == 4, d]
assert[e == L[5, 6], e]

let [a, [b, c], /d, *e] = L[1, L[2, 3]]
assert[a == 1, a]
assert[b == 2, b]
assert[c == 3, c]
assert[d is nil, d]
assert[e == L[], e]

assert[0.0 < 1]

# Test floordiv behavior
assert[0.5 == 0.5]
assert[1/2 == 0.5, 1/2]
assert[3/2 == 1.5, 3/2]
assert[3//2 == 1, 3//2]
assert[1.0 == 1]
assert[0.3 + 0.7 == 1]
assert[0.33 + 1.67 == 2]

math = import['math']
nCr = math@nCr

assert[(r = nCr[0, 0]) == 1, r]
assert[(r = nCr[4, 4]) == 1, r]
assert[(r = nCr[4, 0]) == 1, r]
assert[(r = nCr[4, 2]) == 6, r]
assert[(r = nCr[5, 2]) == 10, r]
assert[(r = nCr[5, 3]) == 10, r]

gcd = math@gcd

assert[(g = gcd[6]) == 6, g]
assert[(g = gcd[3, 6]) == 3, g]
assert[(g = gcd[3, 6, 9]) == 3, g]
assert[(g = gcd[12, 6, 9]) == 3, g]
assert[(g = gcd[1071, 462]) == 21, g]

factorial = math@factorial

assert[(f = factorial[0]) == 1, f]
assert[(f = factorial[1]) == 1, f]
assert[(f = factorial[2]) == 2, f]
assert[(f = factorial[6]) == 720, f]

# Pretty sure 'end' and 'start' here should not take a whole 1 second.
# Also, we sleep for 1 millisecond to make sure end - start != 0
start = time[]
sleep[1]
end = time[]
assert[end - start > 0 and end - start < 1000, end - start]

r"""

# Seems to take ~2.5 sec on late 2013 27" iMac.

a = time[]
print['start time %s' % L[a]]

print['sum = %s' % L[range[0, 1000000].list[].reduce[\a b. a + b]]]

b = time[]
print['end time %s' % L[b]]

print['%s sec' % L[(b - a) / 1000.]]

"""
'''

endTime = time[]

print[
  "*** All core tests passed in ~%s seconds ***" %
  L[endTime - startTime]]
