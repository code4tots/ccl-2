nCr = \n k {
  assert[n >= 0 and k >= 0, L[n, k]]

  if k > n
    return 0

  # nCr[n, k] = nCr[n, n - k]
  if 2 * k > n
    return nCr[n, n - k]

  # nCr[n, k] = nCr[n-1, k-1] * n / k
  x = 1
  i = n - k + 1
  j = 1
  while j <= k {
    x = x * i / j
    i = i + 1
    j = j + 1
  }
  return x
}

_gcd = \a b {
  while b != 0 {
    t = b
    b = a % b
    a = t
  }
  return a
}

gcd = \x *xs {
  return xs.foldl[_gcd, x]
}
