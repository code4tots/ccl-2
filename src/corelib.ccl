# corelib.ccl
#
# A lot of the basic utilities can be implemented in the language itself.
# This should make porting easier if I choose to do so in the future.
#

"""

# Bultins implemented natively

# Truthiness cannot be overriden.
# 'nil' and 'false' are false, and all
# other values are true.

L
  # Creates a 'List' instance of its arguments.

M
  # Expects an even number of arguments.
  # Creates a 'Map' instance.

err
  # Expects a single string argument and throws an err.

Val@__meta__
  # expects a single string argument
  # and returns an unbound value from the meta blob's attribute table,
  # or nil if none is found.

Bool@repr

Num@__add__
Num@__sub__
Num@__mul__
Num@__div__
Num@__mod__
Num@__eq__
Num@__lt__
Num@repr

Str@__add__
Str@__mod__ # string format like in Python.
Str@__eq__
Str@__lt__
Str@repr
Str@len
Str@__call__ # getitem

List@add
List@pop
List@__eq__
List@repr
List@len
List@__call__ # getitem
List@__setitem__
List@iter

Map@__eq__
Map@repr
Map@len
Map[]
Map[]=
Map@iter

Func[]
Func@apply
Func@repr

Iter@more
Iter@next

"""

GLOBAL@assert = \cond /msg. if not cond err[msg or "assertion failed"]
GLOBAL@R = \arg. arg.repr[]
GLOBAL@S = \arg. arg.str[]

Meta@__call__ = \*args. self@__new__[*args]
Meta@__new__ = \name. {
  meta = new[Meta]
  meta@name = name
  return meta
}

Val@repr = \.
  '<' + (self.__meta__['name'] or 'unknown') + ' instance>'
Val@__eq__ = \r. self is r
Val@__ne__ = \r. not (self == r)
Val@__le__ = \r. self < r or self == r
Val@__ge__ = \r. not (self < r)
Val@__gt__ = \r. not (self < r or self == r)
Val@str = \. self.repr[]

Nil@repr = \. 'nil'

Bool@repr = \. if self then 'true' else 'false'

Num@__pos__ = \. self
Num@__neg__ = \. 0 - self

Str@str = \. self

List@map = \f {
  i = 0
  xs = L[]
  while i < self.len[] {
    xs.add[f[self[i]]]
    i = i + 1
  }
  return xs
}

List@filter = \f {
  i = 0
  xs = L[]
  while i < self.len[] {
    if f[self[i]]
      xs.add[self[i]]
    i = i + 1
  }
  return xs
}

List@foldl = \f acc {
  i = 0
  while i < self.len[] {
    acc = f[acc, self[i]]
    i = i + 1
  }
  return acc
}

List@foldr = \f acc {
  i = self.len[] - 1
  while 0 <= i {
    acc = f[self[i], acc]
    i = i - 1
  }
  return acc
}

List@fold = List@foldl

List@cut = \start end {
  end = end or self.len[]

  if start < 0
    start = start + self.len[]

  if end < 0
    end = end + self.len[]

  if start < 0 or start > self.len[] or end < 0 or end > self.len[]
    err["List@cut range out of bounds: len = " + self.len[].str[] +
        " start = " + start.str[] + " end = " + end.str[]]

  xs = L[]
  i = start
  while i < end {
    xs.add[self[i]]
    i = i + 1
  }

  return xs
}

List@reduce = \f. self.cut[1, nil].fold[f, self[0]]

GLOBAL@Iter = Meta['Iter']

Iter@__new__ = \more next {
  self = new[Iter]
  self@more = more
  self@next = next
  return self
}

# 'more' and 'next' are the core methods of Iter.
# Subclasses will probably want to override just these methods.
Iter@more = \. self@more.apply[self, L[]]
Iter@next = \. self@next.apply[self, L[]]

Iter@iter = \. self

# TODO: Come up with a more elegant way to implement user
# defined iterators. This might mean implementing something
# like generators in Python.
# If I am going to go the generator route, that is going to be
# bit of effort, and if not done carefully, could really
# complicate things.
# I'm pretty happy with the level of cleanliness in 'Evaluator.java'.
# The main issue with generators is that I need to be able to suspend
# evaluation to come back to on a 'yield'.
# I don't want to implement generators until I have a clean elegant way
# of implementing the evaluator.
# work.
Iter@map = \f {
  src = self
  return Iter[
    \. src.more[],
    \. f[src.next[]]
  ]
}

# Yea it's unfortunate. Having generators could really make the
# following a lot more elegant.
Iter@filter = \f {
  src = self
  state = M['more', true, 'cur', nil]

  next = \. {

    more = false
    while src.more[] {
      x = src.next[]
      if f[x] {
        cur = x
        more = true
        break
      }
    }

    last = state['cur']

    state['more'] = more
    if more then state['cur'] = cur

    return last
  }

  next[]

  return Iter[\. state['more'], next]
}

Iter@takeWhile = \f {
  src = self
  state = M['more', true, 'cur', nil]

  next = \. {
    last = state['cur']
    x = src.next[]

    if not f[x]
      state['more'] = false
    else
      state['cur'] = x

    return last
  }

  next[]

  return Iter[\.state['more'], next]
}

Iter@do = \f {
  while self.more[]
    f[self.next[]]
}

Iter@list = \. {
  xs = L[]
  while self.more[]
    xs.add[self.next[]]
  return xs
}

GLOBAL@range = \start /end /step. {
  state = M['i', start]

  step = step or 1

  if step == 0
    err['range step may not be zero']

  more =
    if end is nil      \. true
    else if step > 0   \. state['i'] < end
    else               \. state['i'] > end

  next = \{
    val = state['i']
    state['i'] = val + step
    return val
  }

  return Iter[more, next]
}

Meta.extend[Val]
Nil.extend[Val]
Bool.extend[Val]
Num.extend[Val]
Str.extend[Val]
List.extend[Val]
Map.extend[Val]
Func.extend[Val]
Iter.extend[Val]
BuiltinIter.extend[Iter]
