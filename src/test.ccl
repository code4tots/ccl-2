f = \ x. x + 1

assert[f[5] == 6, f[5]]
assert[f[5].repr[] == '6', f[5].repr[]]
assert[(2.45).repr[] == '2.45', (2.45).repr[]]
assert[R[2.45] == '2.45', R[2.45]]
assert[L[1,2,3].repr[] == "L[1, 2, 3]", L[1,2,3].repr[]]
assert[M[1,2].repr[] == "M[1, 2]", M[1,2].repr[]]
assert[M[1,2].str[] == "M[1, 2]", M[1,2].str[]]
assert[nil.str[] == 'nil', nil.str[]]
assert[true.str[] == 'true', true.str[]]
assert[false.str[] == 'false', false.str[]]

assert[true]
assert[not false]
assert[true or false]
assert[false or true]
assert[not (false or false)]
assert[not (true and false)]
assert[true and true]

assert[L[1, 2, 3].map[\x. x + 1] == L[2, 3, 4]]

# There was a lexer bug with 'x+1' where 'x+1'
# would be interpreted as the tokens 'x' and '+1' instead of
# 'x', '+', and '1'.
assert[L[1, 2, 3].map[\x. x+1] == L[2, 3, 4]]
assert[+1 == 1]
assert[-1 == 0-1]

assert[L[1, 2, 3][1] == 2]
assert[M[1, 2][1] == 2]

# TODO: Figure out a nice syntax so that I don't have to
# repeat the class name every time.
IndexableTest = Meta["IndexableTest"]
IndexableTest@__call__ = \index. index + 3

indexable = new[IndexableTest]
assert[indexable[5] == 8]

xs = L[]
assert[xs.str[] == 'L[]']
xs.add[1]
assert[xs.str[] == 'L[1]']

i = 0
xs = L[]
while i < 5 {
  xs.add[i]
  i = i + 1
}
assert[xs == L[0, 1, 2, 3, 4]]

x = 0
if true
  x = 1
assert[x == 1]

x = 0
if false
  x = 1
assert[x == 0]

if true
  x = 0
else
  x = 1
assert[x == 0]

if false
  x = 0
else
  x = 1
assert[x == 1]

assert[if 1 == 0 false else true]

MyClass = Meta["MyClass"]
x = new[MyClass]
x@x = 534
assert[x@x == 534]

f = \x{x+2}
assert[f[2] == nil, f[2]]

f = \x{return x+2}
assert[f[2] == 4]

xs = L[1, 2, 3]
xs[1] = 1
xs[2] = 1
assert[xs == L[1, 1, 1]]

assert[L[1, 2, 3].len[] == 3]

assert[L[1, 4, 2, 3].filter[\x. 2 < x] == L[4, 3]]

assert[L[1, 2].foldl[L, 0] == L[L[0, 1], 2], L[1, 2].foldl[L, 0].repr[]]
assert[L[0, 1].foldr[L, 2] == L[0, L[1, 2]]]
assert[L[1, 2, 3].fold[\a b. a + b, 4] == 10]

assert[L[1, 2, 3, 4].cut[1, nil] == L[2, 3, 4], L[1, 2, 3, 4].cut[1, nil]]
assert[L[1, 2, 3, 4].cut[1, 2] == L[2], L[1, 2, 3, 4].cut[1, 2]]
assert[L[1, 2, 3, 4].cut[1, -1] == L[2, 3], L[1, 2, 3, 4].cut[1, -1]]

assert[L[1, 2, 3].reduce[\a b. a + b] == 6]

assert[1 < 2]
assert[5 >= 4 and 5 >= 5]
assert[1 <= 1 and 1 <= 2]
assert[2 > 1 and not (1 > 2)]

assert[List.str[] == 'List', List.str[] + " " + List.repr[]]

assert['hi'.str[] == 'hi']
assert['hi'.repr[] == '"hi"']

(\x y. assert[self == 3 and x == 1 and y == 2]).apply[3, L[1, 2]]

assert[L[1, 2, 3].iter[].list[] == L[1, 2, 3]]
assert[M[1, 2].iter[].list[] == L[L[1, 2]]]
assert[L[1, 2, 3].iter[].map[\x. x + 1] is not nil]
assert[L[1, 2, 3].iter[].map[\x. x + 1].list[] == L[2, 3, 4]]
iter = L[1].iter[]
assert[iter is iter.iter[]]

xs = L[]
assert[L[5, 6, 7].iter[].do[\x. xs.add[x]] is nil]
assert[xs == L[5, 6, 7]]

xs = L[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1].iter[]
    .filter[\x. x > 4]
    .map[\x. x + 2]
    .list[]

assert[xs == L[7, 8, 7], xs]

xs = range[0, 5].list[]
assert[xs == L[1, 2, 3, 4], xs]

print["*** All tests pass! ***"]
