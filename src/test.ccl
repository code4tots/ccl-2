f = \ x. x + 1

assert[f[5] == 6]
assert[f[5].repr[] == '6', f[5].repr[]]
assert[(2.45).repr[] == '2.45', (2.45).repr[]]
assert[R[2.45] == '2.45', R[2.45]]
assert[L[1,2,3].repr[] == "L[1, 2, 3]", L[1,2,3].repr[]]
assert[M[1,2].repr[] == "M[1, 2]", M[1,2].repr[]]
assert[M[1,2].str[] == "M[1, 2]", M[1,2].str[]]

assert[true]
assert[not false]
assert[true or false]
assert[false or true]
assert[not (false or false)]
assert[not (true and false)]
assert[true and true]

assert[L[1, 2, 3].map[\x. x + 1] == L[2, 3, 4]]

# There was a lexer bug with 'x+1' where 'x+1'
# would be interpreted as the tokens 'x' and '+1' instead of
# 'x', '+', and '1'.
assert[L[1, 2, 3].map[\x. x+1] == L[2, 3, 4]]
assert[+1 == 1]
assert[-1 == 0-1]

assert[L[1, 2, 3][1] == 2]
assert[M[1, 2][1] == 2]

IndexableTest = C["__name__", "IndexableTest", "__call__", \index. index + 3]
indexable = new[IndexableTest]
assert[indexable[5] == 8]

xs = L[]
assert[xs.str[] == 'L[]']
xs.add[1]
assert[xs.str[] == 'L[1]']

i = 0
xs = L[]
while i < 5 {
  xs.add[i]
  i = i + 1
}
assert[xs == L[0, 1, 2, 3, 4]]

x = 0
if true
  x = 1
assert[x == 1]

x = 0
if false
  x = 1
assert[x == 0]

if true
  x = 0
else
  x = 1
assert[x == 0]

if false
  x = 0
else
  x = 1
assert[x == 1]

assert[if 1 == 0 false else true]

print["*** All tests pass! ***"]
